#include <iostream>
#include<climits>
using namespace std;
int lazy[1000]={};
void BuildTree(int *a,int s,int e,int *tree,int idx){
    //base case
    if(s==e) {
        tree[idx]=a[s];
        return;
    }
    int mid=(s+e)/2;
    //recursion case
    BuildTree(a,s,mid,tree,2*idx);
    BuildTree(a,mid+1,e,tree,2*idx+1);
    tree[idx]=min(tree[2*idx],tree[2*idx+1]);
    return;
}
//find Minimum in range qs and qe
int Query(int s,int e,int qs,int qe,int *tree,int idx){
    //complete overlap
    if(qs<=s&&qe>=e){
        return tree[idx];
    }
    //No overlap
    if(s>qe||qs>e){
        return INT_MAX;
    }
    int mid=(s+e)/2;
    //partial overlap == call left or right subtree
    int leftRes=Query(s,mid,qs,qe,tree,2*idx);
    int rightRes=Query(mid+1,e,qs,qe,tree,2*idx+1);
    return min(leftRes,rightRes);
}
//update a specific node in given segment tree
void Updata_Node(int s,int e,int i,int inc,int *tree,int idx){
//base case
//outof bond condition
if(s>i||e<i) {
    return;
}
//idx found then change that idx 
  if(s==e){
      tree[idx]+=inc;
      return;
  }
  int mid=(s+e)/2;
  Updata_Node(s,mid,i,inc,tree,2*idx);
  Updata_Node(mid+1,e,i,inc,tree,2*idx+1);
  tree[idx]=min(tree[2*idx],tree[2*idx+1]);
  return;
}
//Now update a range in segment tree
void Updata_Range(int s,int e,int qs,int qe,int inc,int *tree,int idx){
    //out of bond =No overlap
    if(s>qe||e<qs) return;
    //base case
    if(s==e) {
        tree[idx]+=inc;
        return;
    }
    int mid=(s+e)/2;
    Updata_Range(s,mid,qs,qe,inc,tree,2*idx);
    Updata_Range(mid+1,e,qs,qe,inc,tree,2*idx+1);
    tree[idx]=min(tree[2*idx],tree[2*idx+1]);
    return;
}
int Query_Lazy(int *tree,int s,int e,int qs,int qe,int idx){
    if(lazy[idx]!=0){
    tree[idx]+=lazy[idx];
    //if curr idx is not leaf node
    if(s!=e){
        lazy[2*idx]+=lazy[idx];
        lazy[2*idx+1]+=lazy[idx];
    }
    lazy[idx]=0;
}
//no overlap
   if(s>qe||e<qs){
       return INT_MAX;
   }
   //complete overlap
   if(qs<=s&&e<=qe){
       return tree[idx];
   }
   //partial overlap=call on left and right child
   int mid=(s+e)/2;
   int leftRes=Query_Lazy(tree,s,mid,qs,qe,idx);
   int rightRes=Query_Lazy(tree,mid+1,e,qs,qe,idx);
   return min(leftRes,rightRes);
}
void Update_Range_Lazy(int *tree,int s,int e,int qs,int qe,int inc,int idx){
//Never go down if lazy value of node is present first resolve it
if(lazy[idx]!=0){
    tree[idx]+=lazy[idx];
    //if curr idx is not leaf node
    if(s!=e){
        lazy[2*idx]+=lazy[idx];
        lazy[2*idx+1]+=lazy[idx];
    }
    lazy[idx]=0;
}
//no overlap
  if(s>qe||e<qs) return;
  //complete overlap
  if(qs<=s&&e<=qe){
      tree[idx]+=inc;
      //if curr node is not leaf node
      if(s!=e){
      lazy[2*idx]+=inc;
      lazy[2*idx+1]+=inc;
      }
      return;
  }
  //partial overlap call on left and right child
  int mid=(s+e)/2;
  Update_Range_Lazy(tree,s,mid,qs,qe,inc,idx);
  Update_Range_Lazy(tree,mid+1,e,qs,qe,inc,idx);
   tree[idx]=min(tree[2*idx],tree[2*idx+1]);
}
int main() {
   int a[] = {1,3,2,-5,6,4};
    int n = sizeof(a)/sizeof(int);
    
    int *tree = new int[4*n+1];
    
    BuildTree(a,0,n-1,tree,1);
    for(int i=0;i<=4*n;i++){
        cout<<tree[i]<<" ";
    }
    cout<<endl;
  //query funciton
   cout<< Query(0,n-1,1,2,tree,1)<<endl;

  //update Node
    Updata_Node(0,n-1,2,10,tree,1);
    Updata_Node(0,n-1,3,15,tree,1);

   for(int i=0;i<=4*n;i++){
        cout<<tree[i]<<" ";
    }
    //update range
    cout<<endl;
    Updata_Range(0,n-1,0,5,10,tree,1);
      for(int i=0;i<=4*n;i++){
        cout<<tree[i]<<" ";
    }
}
